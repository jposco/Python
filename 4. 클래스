#클래스
class Movie:
  #필드(속성)
  #메소드
  tilte = "bossbaby"
  
movie1=Movie()#객체 선언부
print(movie1.title)

#생성자
class Movie:
  #필드(속성)
  #메소드
  def __init__(self):
  print("생성자")
  
movie1=Movie()

#메소드
class Movie:
  count=0 #인스턴스변수
  def __init__(self, title, audience):
        self.title = title #필드 선언
        self.audience=audience #필드 선언
        var = 1 #지역변수 선언
        print("생성자")
        Movie.count+=1
                
  def show_info(self):
        print(f"제목은 {self.title}, 관객수는 {self.audience}")
   
movie1=Movie("bossbaby", 100) 
movie1.show_info() #제목은 bossbaby, 관객수는 100
print(movie1.title) #bossbaby
print(Movie.count) #1

movie2=Movie("bossbaby2", 200)
movie2.show_info() #제목은 bossbaby2, 관객수는 200
print(movie1.count) #2

#클래스의 상속 배우기
class Country:
    def __init__(self, name, population, capital):
        self.__name = name
        self.__population = population
        self.__capital = capital

    def show(self):
        print("국가 클래스입니다")

    def show_detail(self):
        print("국가 클래스의 메소드 입니다.")

    def get_name(self):
        return  self.__name

class Korea(Country):
    def __init__(self, name, population, capital):
        super().__init__(name, population, capital)

    def show_name(self):
        # print("국가 이름은: ", self.__name)
        print("국가 이름은: ", self.get_name())

    def show_detail(self):
        #print(f"국가이름은 {self.__name}, 인구수는 {self.__population}, 수도는 {self.__capital}")
        print("자식 클래스의 메소드 입니다.")
        
#클래스의 접근제어자 관리
class Movie:
    count = 0    
    def __init__(self, title, audience) :
        self.__title = title
        self._audience = audience 
        Movie.count += 1

    def get_title(self):
        return self.__title

    def set_title(self, title):
        self.__title = title

    def get_audience(self):
        return self._audience

movie1 = Movie("bossbaby", 100)
print(movie1.get_title())
movie1.set_title("보스베이비")
print(movie1.get_title())

print(movie1._audience)
print(movie1.get_audience())

#클래스 상속의 오버라이딩
class Country:
    def __init__(self, name, population, capital):
        self.__name = name
        self.__population = population
        self.__capital = capital

    def show(self):
        print("국가 클래스입니다")

    def show_detail(self):
        print("국가 클래스의 메소드 입니다.")

    def get_name(self):
        return  self.__name

class Korea(Country):
    def __init__(self, name, population, capital):
        super().__init__(name, population, capital)

    def show_name(self):
        # print("국가 이름은: ", self.__name)
        print("국가 이름은: ", self.get_name())

    def show_detail(self):
        #print(f"국가이름은 {self.__name}, 인구수는 {self.__population}, 수도는 {self.__capital}")
        print("자식 클래스의 메소드 입니다.")

country = Korea("대한민국", "5천만", "서울")
country.show()
print(country.get_name())
country.show_name()
country.show_detail()

-------------------------------------실습---------------------------------------
### 클래스를 사용하여 계산기 만들어보기
class FourCal:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def add(self):
        result = self.x + self.y
        return result
    def mul(self):
        result = self.x - self.y
        return result
    def sub(self):
        result = self.x * self.y
        return result
    def div(self):
        result = self.x / self.y
        return result
x = int(input("첫 번째 숫자를 입력하세요: "))
y = int(input("두 번째 숫자를 입력하세요: "))
a = FourCal(x, y)
print(a.add())
print(a.mul())
print(a.sub())
print(a.div())

### 클래스로 슈퍼마켓 만들기
class Super:
    def __init__(self, location, name, product, customer):
        self.location = location
        self.name = name
        self.product = product
        self.customer = int(customer)
    def print_location(self):
        return self.location
    def change_category(self):
        super_product = self.product
        return super_product
    def show_list(self):
        print("파는 물건 :소금, 후추,",self.product)
    def enter_customer(self):
        self.customer+=1
        print("오늘 방문 인원:",self.customer,"명")
    def show_info(self):
        print(f"{self.location}에 있는 {self.name}이고, {self.product}을 팔고 오늘 손님은 {self.customer}명왔습니다.")
        
a=Super("서울","제일제당","설탕","10")
print("가게 위치:",a.print_location())
print("파는 물건:",a.change_category())
a.show_list()                  # 소금, 후추 설탕 출력
a.enter_customer()             # 11 출력
a.enter_customer()             # 12 출력
a.show_info()

###클래스로 캐릭터키우기
class Character:
    def __init__(self, name):
        self.name = name
        self.level = 0
        self.item = 0
    def level_up(self):
        self.level+=1
        print("현재 레벨:",self.level)
    def gain_item(self):
        self.item+=1
        print("현재 아이템개수:",self.item)
    def lose_item(self):
        self.item-=1
        print("현재 아이템개수:",self.item)
    def info(self):
        print(f"이름:{self.name}, level:{self.level}, 아이템개수:{self.item}")
    def set_name(self,name):
        self.name=name
        print("새이름:",self.name)
name = input("당신의 이름은?")
c=Character(name)
while(1):
    command = int(input("다음행동"))
    if command==1:
        name = input("당신의 이름은?")
        c.set_name(name)
    elif command==2:
        c.level_up()
    elif command==3:
        c.gain_item()
    elif command==4:
        c.lose_item()
    elif command==5:
        c.info()
    elif command==0:
        break
    else:
        print("유효한 입력이 아닙니다.")





### 상속을 사용한 계산기 업그레이드
class MoreFourCal(FourCal):
    def pow(self):
        result = self.x ** self.y
        return result
    
x = int(input("첫 번째 숫자를 입력하세요: "))
y = int(input("두 번째 숫자를 입력하세요: "))
a = MoreFourCal(x, y)
print(a.add())
print(a.mul())
print(a.sub())
print(a.div())
print(a.pow())

### 상속의 오버라이딩을 이용한 실습
class FourCal:
    def __init__(self):
        self.value = 100
        
    def sub(self, value):
        self.value -=value
class MinLimitCal(FourCal):
    def sub(self, value): 
        self.value -=value       
        if self.value<=0:
            print(0)
        else:            
            print(self.value)
    
    
cal = MinLimitCal()
cal.sub(20)
cal.sub(90)

### 상속의 오버라이딩을 통한 실습 삼각형 사각형 넓이 구하기
class shape:
    def __init__(self, side_num, length, sero):
        self.side_num = side_num 
        self.base_length = length 
        self.sero = sero
        
    def info(self):
        print(f"변의 개수: {self.side_num} 밑변의 길이: {self.base_length}")
        
class rectangle(shape):
    def __init__(self, side_num, length, sero):
        super().__init__(side_num, length, sero)
        
    def area(self):
        result = self.base_length * self.sero
        print(f"사각형의 넓이: {result}") 
        
class triangle(shape):
    def __init__(self, side_num, length, sero):
        super().__init__(side_num, length, sero)
        
    def area(self):
        result = (self.base_length * self.sero) / 2      
        print(f"삼각형의 넓이: {result}") 
while(1):
    x = int(input("변의 개수: "))
    y = int(input("밑변의 길이: "))
    z = int(input("높이는? "))
    
    if x == 3:
        T = triangle(x, y, z)
        T.area()
    elif x == 4:
        R = rectangle(x, y, z)
        R.area()
